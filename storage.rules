rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for common checks
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size <= 10 * 1024 * 1024; // 10MB limit
    }
    
    // User content structure - hierarchical permissions for intermediate paths
    match /users/{userId} {
      // Allow reading user's content folder
      allow read: if true;
      // Allow writing only by the user who owns the folder
      allow write: if isOwner(userId);
      
      // Nested user content
      match /{allPaths=**} {
        // Allow anyone to read user content (profile pictures, blog images)
        allow read: if true;
        
        // Allow write only by the user who owns the folder
        allow write: if isOwner(userId) && isValidImage();
      }
    }
    
    // User profile images - specific rules with intermediate path permissions
    match /users/{userId}/profile {
      allow read: if true;
      allow write: if isOwner(userId);
      
      match /{fileName} {
        allow read: if true;
        allow write: if isOwner(userId) && isValidImage();
      }
    }
    
    // User blog images - specific rules with intermediate path permissions
    match /users/{userId}/blogs {
      allow read: if true;
      allow write: if isOwner(userId);
      
      match /{blogId} {
        allow read: if true;
        allow write: if isOwner(userId);
        
        match /{fileName} {
          allow read: if true;
          allow write: if isOwner(userId) && isValidImage();
        }
      }
    }
    
    // Legacy profile images - for backward compatibility
    match /profile_images/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidImage();
    }
    
    // Legacy blog images - read-only for backward compatibility
    match /blog_images/{imageId=**} {
      allow read: if true;
      // Disallow new writes to legacy paths
      allow write: if false;
    }
    
    // Default rule - disallow access unless specific rules allow it
    match /{allPaths=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
