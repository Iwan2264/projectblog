rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for common checks
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // User content structure
    match /users/{userId}/{allPaths=**} {
      // Allow anyone to read user content (profile pictures, blog images)
      allow read: if true;
      
      // Allow write only by the user who owns the folder
      allow write: if isOwner(userId) && isValidImage();
    }
    
    // User profile images specific rules
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      allow write: if isOwner(userId) && isValidImage();
    }
    
    // User blog images specific rules
    match /users/{userId}/blogs/{blogId}/{allImages=**} {
      allow read: if true;
      allow write: if isOwner(userId) && isValidImage();
    }
    
    // Legacy paths for backward compatibility
    match /blog_images/{imageId=**} {
      allow read: if true;
      // Disallow new writes to legacy paths
      allow write: if false;
    }
    
    match /profile_images/{userId} {
      allow read: if true;
      // Disallow new writes to legacy paths
      allow write: if false;
    }
    
    // Default rule - disallow access unless specific rules allow it
    match /{allPaths=**} {
      allow read: if true;
      allow write: if false;
    }
  }
}
