rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if a blog is published
    function isPublished(blogData) {
      return blogData.isDraft == false;
    }
    
    // Users root documents
    match /users/{userId} {
      // Anyone can read the user document
      allow read: if true;
      // Only the user can create/update their own document
      allow write: if isOwner(userId);
      
      // User's profile subcollection
      match /profile/{document=**} {
        // Anyone can read profile data
        allow read: if true;
        // Only the user can write to their own profile
        allow write: if isOwner(userId);
      }
      
      // User's blogs intermediate paths - allow read/write for all nested paths
      match /blogs/{document=**} {
        allow read, write: if isOwner(userId);
      }
      
      // User's blogs collections intermediate document
      match /blogs/collections {
        allow read, write: if isOwner(userId);
      }
      
      // User's drafts subcollection
      match /blogs/collections/drafts/{blogId} {
        // Only the user can read and write their own drafts
        allow read, write: if isOwner(userId);
        
        // Blog comments subcollection for drafts (if needed)
        match /comments/{commentId} {
          // Only the blog author can read comments on drafts
          allow read: if isOwner(userId);
          
          // Only the blog author can manage comments on drafts
          allow write: if isOwner(userId);
        }
      }
      
      // User's published posts subcollection
      match /blogs/collections/published/{blogId} {
        // Anyone can read published blogs
        allow read: if true;
        
        // Only the user can write to their own published blogs
        allow write: if isOwner(userId);
        
        // Blog comments subcollection for published posts
        match /comments/{commentId} {
          // Anyone can read comments on published posts
          allow read: if true;
          
          // To create a comment:
          // 1. User must be authenticated
          // 2. Comment authorId must match the authenticated user's ID
          allow create: if isAuthenticated() && 
                          request.resource.data.authorId == request.auth.uid;
          
          // Only the comment author can update or delete their comment
          allow update, delete: if isAuthenticated() && 
                                  resource.data.authorId == request.auth.uid;
        }
      }
    }
    
    // Global blogs collection (for queries)
    match /blogs/{blogId} {
      // Allow reading published blogs, or drafts by their author
      allow read: if isPublished(resource.data) || 
                    (isAuthenticated() && request.auth.uid == resource.data.authorId);
      
      // For writes, get the author ID
      function getAuthorId() {
        return request.resource.data.authorId;
      }
      
      // Allow creating blogs only for authenticated users creating their own post
      allow create: if isAuthenticated() && getAuthorId() == request.auth.uid;
      
      // Allow updates or deletes only by the author
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;
    }
    
    // Username lookup collection
    match /usernames/{username} {
      // Anyone can read usernames (to check availability)
      allow read: if true;
      
      // Only the owner of the userId can create/update username documents
      allow create, update: if isAuthenticated() && 
                              request.resource.data.userId == request.auth.uid;
                              
      // Only the owner can delete their username
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // Global comments collection
    match /comments/{commentId} {
      allow read: if true;
      
      // To create a comment:
      // 1. User must be authenticated
      // 2. Comment authorId must match authenticated user's ID
      allow create: if isAuthenticated() && 
                      request.resource.data.authorId == request.auth.uid;
      
      // Only the comment author can update or delete their comment
      allow update, delete: if isAuthenticated() && 
                              resource.data.authorId == request.auth.uid;
    }
    
    // Analytics collection - allow creation by anyone
    match /analytics/{docId} {
      allow read: if false;  // No one can read individual analytics records (use aggregation instead)
      allow create: if true; // Allow anonymous analytics creation
    }
  }
}
